" ~/.vimrc
" author: Johannes Kulick
" This is my .vimrc based on snippets found all over the web. Cudos to all the
" hackers outside there helping me getting things done the way I like it.
" Feel free to use. If you have some comments, hints or critics mail me:
" <kulick -at- inf.fu-berlin.de>

"pathogen {{{
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
"}}}

" general {{{ 
set undofile
set undodir=~/.vim/undo

"autocmd!             " clear any autocommands
set nocompatible     " get out of horrible vi-compatible mode
filetype on          " enable filetype detection
set history=1000     " #lines to remember
"set confirm         " enable error files and error jumping
filetype indent on   " load filetype plugins
filetype plugin on   " load filetype plugins
"set isk+=_,$,@,%,#,- " none of these should be word dividers, so make them not be (iskeyword)
set encoding=UTF-8
"language en_US.UTF-8 " english
"}}}

" theme/colors {{{ 

if has("gui_running")
	source $VIMRUNTIME/delmenu.vim
	set langmenu=en_US.UTF-8
	source $VIMRUNTIME/menu.vim
	set guioptions-=T
	set lines=50
	set columns=120
	if has("gui_gtk2")
		""set guifont=Courier\ New\ 10
		set guifont=Bitstream\ Vera\ Sans\ Mono\ for\ Powerline\ 9
    let g:Powerline_symbols = 'fancy'
	elseif has("x11")
		"set guifont=-*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
	else
		set guifont=Lucida_Console:h10:cDEFAULT
		"set guifont=Andale_Mono:h10:cDEFAULT
	endif
endif
set viminfo='200,<300,s150,%,h,!
" have syntax highlighting in terminals which can display colors
if has('syntax') && (&t_Co > 2) || has("gui_running")
	syntax on " syntax highlighting on
	set background=dark
  if has("gui_running")
      colorscheme solarized
  else
      colorscheme koehler
  endif
endif
"}}}

" vim ui {{{

set wildmenu       " turn on wild menu
" have command-line completion <tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:full

set clipboard=unnamed
set ruler          " show actual cursor position
"set cmdheight=2    " the command bar is 2 high
set number         " line numbers
set lazyredraw     " do not redraw while running macros (much faster) 
"set hidden         " you can change buffer without saving
set backspace=2    " backspace over everything
"set whichwrap+=<,>,h,l  " backspace and cursor keys wrap to
"set mouse=a        " use mouse everywhere
set shortmess=atI   " shortens messages
"set report=0       " tell us when anything is changed via :...
set errorbells      " make noise
"set noerrorbells   " don't make noise
"set vb t_vb=       " prevents vi from making its annoying beeps (visualbell)
"set fillchars=vert:\ ,stl:\ ,stlnc:\ " make the splitters between windows be blank
"}}}

" vim cues {{{

" vim 7+ and slow machines
set noshowmatch     " will cause the cursor to very briefly jump to a brace/parenthese/bracket's 'match'
set mat=0         " how many tenths of a second to blink matching brackets for
" vim 6- or fast machines
"set showmatch     " will cause the cursor to very briefly jump to a brace/parenthese/bracket's 'match'
"set mat=5         " how many tenths of a second to blink matching brackets for

"set nohlsearch    " do not highlight searched for phrases
set hlsearch      " highlight all matches for a search pattern
"set ignorecase    " ignore case in search,
"set smartcase     " unless they contain upper-case letters. 
set incsearch     " incremental search: show the `best match so far' as search strings are typed
"set gdefault      " assume the /g flag on :s substitutions to replace all matches in a line
"set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$ " what to show when I hit :set list
"set lines=80      " 80 lines tall
"set columns=160   " 160 cols wide
"set so=10         " Keep 10 lines (top/bottom) for scope
"set novisualbell  " don't blink
""set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set laststatus=2  " always show the status line
"}}}

" text formatting/layout {{{

set colorcolumn=80
set cursorline
"set fo=tcrqn      " (formatoptions)
set autoindent    " autoindent
set smartindent   " smartindent 
"set cindent       " do c-style indenting
set softtabstop=2 " unify (use indents of 2 spaces)

" no tabs
"set shiftround
"set expandtab
" use tabs
set tabstop=2     " tab spacing (settings below are just to unify it)
set shiftwidth=2  " unify 
set expandtab      " no real tabs please!
"set smarttab      " use tabs at the start of a line, spaces elsewhere

" nowrap
"set nowrap        " do not wrap lines (only on display)
"set sidescroll=10
" wrap
""set wrap          " wrap lines (only on display)

set listchars+=tab:>-,eol:<,precedes:<,extends:>

"set textwidth=72  " linebreak with <EOL> after length
"set wrapmargin=5  " linebreak with <EOL> after (screewidth - length)

"}}}

" other {{{

" display the current mode and partially-typed commands in the status line
set showmode     " display current mode ('insert', 'replace', ...)
set showcmd      " display partially-typed commands in the status line
set nomodeline   " don't have files trying to override this .vimrc
set fileformat=unix
set fileformats=unix,dos,mac

" for both CSS and HTML, use genuine tab characters for indentation, to make
" files a few bytes smaller
autocmd FileType html,css set noexpandtab tabstop=2

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings):
autocmd FileType make set noexpandtab shiftwidth=8

"}}}

" mappings {{{
let mapleader = ','

" start make
noremap <leader>m :make<CR>

" NERDtree 
noremap <leader>n :NERDTreeToggle<CR>

" jump between .h and .cpp
noremap <leader>h :FSHere<CR>

let g:CommandTAcceptSelectionTabMap='<CR>'

" indent after a paranthesis
inoremap {<CR> {<CR><Space><Space><CR><Backspace>}<Esc>klli

" ;; jumps to the end of line and inserts ;
inoremap ;; <Esc>A;

" use jj for convenience Escape
inoremap jj <ESC>

" delete search highlighting
nnoremap <leader><space> :nohlsearch<CR>

" <leader>r start search/replace
nnoremap <leader>r :%s/\<<C-r><C-w>\>/

" <leader>cd goes to the path of the current file
map <leader>cd :cd %:p:h<CR>

nnoremap <Space> za
"}}}

" keystrokes {{{

" * beschissene deutsche umlaute und sz
imap ÎáÎéÎå ä
imap ÎİÎåÎåÎı ä
imap ÎáÎíÎı ö
imap ÎİÎåÎíÎõ ö
imap ÎáÎåÎ÷ ü
imap ÎİÎåÎñÎå ü
imap ÎáÎíÎå Ä
imap ÎİÎáÎ÷Îõ Ä
imap ÎáÎñÎé Ö
imap ÎİÎåÎáÎí Ö
imap ÎáÎñÎí Ü
imap ÎİÎåÎåÎİ Ü
imap ÎåÎåÎñ ß
imap ÎİÎåÎåÎé ß


" * Keystrokes -- Insert Mode

" allow <BkSpc> to delete line breaks, beyond the start of the current
" insertion, and over indentations:
set backspace=eol,start,indent

" disable arrow keys in normal mode
noremap  <Up> ""
"noremap! <Up> <Esc>
noremap  <Down> ""
"noremap! <Down> <Esc>
noremap  <Left> ""
"noremap! <Left> <Esc>
noremap  <Right> ""
"noremap! <Right> <Esc>

"}}}

" file type specific options {{{

" tex {{{
" " IMPORTANT: grep will sometimes skip displaying the file name if you
" " search in a singe file. This will confuse Latex-Suite. Set your grep
" " program to always generate a file-name.
set grepprg=grep\ -nH\ $*
"
" " OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults
" to
" " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" " The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode $*'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_ViewRule_pdf = 'zathura'
let g:Tex_MultipleCompileFormats = 'pdf'

" Math enviroments get a pretty visualization
set cole=2
"}}}

" CPP {{{
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/gl
set tags+=~/.vim/tags/sdl
set tags+=~/.vim/tags/qt4
set tags+=~/.vim/tags/mlr
" build tags of your own project with Ctrl-F12
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" }}}

" Python {{{

au FileType python setlocal tabstop=4
au FileType python setlocal softtabstop=4
au FileType python setlocal shiftwidth=4

"}}}

" vimrc {{{
au FileType vim setlocal foldmethod=marker
au FileType vim setlocal foldmarker={{{,}}}
" }}}

" zshrc {{{
au FileType zsh setlocal foldmethod=marker
au FileType zsh setlocal foldmarker={{{,}}}
" }}}
"}}}
