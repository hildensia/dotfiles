" ~/.vimrc
" author: Johannes Kulick
" This is my .vimrc based on snippets found all over the web. Cudos to all the
" hackers outside there helping me getting things done the way I like it.
" Feel free to use. If you have some comments, hints or critics mail me:
" <kulick -at- inf.fu-berlin.de>

" bundles {{{
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdcommenter'
Plugin 'gnupg.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'fugitive.vim'
Plugin 'Syntastic'
Plugin 'FSwitch'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'svermeulen/vim-easyclip'
Plugin 'lervag/vimtex'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
call vundle#end()
"}}}

" general {{{ 
set undofile
set undodir=~/.vim/undo

"autocmd!             " clear any autocommands
set nocompatible     " get out of horrible vi-compatible mode
set hidden
filetype on          " enable filetype detection
set history=1000     " #lines to remember
"set confirm         " enable error files and error jumping
filetype plugin indent on   " load filetype plugins
"set isk+=_,$,@,%,#,- " none of these should be word dividers, so make them not be (iskeyword)
set encoding=UTF-8
"language en_US.UTF-8 " english
"}}}

" theme/colors {{{ 

if has("gui_running")
	source $VIMRUNTIME/delmenu.vim
	set langmenu=en_US.UTF-8
	source $VIMRUNTIME/menu.vim
	set guioptions-=T
	set lines=50
	set columns=120
  set guifont=DejaVu\ Sans\ Mono\ 9
endif
set viminfo='200,<300,s150,%,h,!
" have syntax highlighting in terminals which can display colors
if has('syntax') && (&t_Co > 2) || has("gui_running")
	syntax on " syntax highlighting on
endif
set background=light
"}}}

" vim ui {{{

colorscheme solarized

set wildmenu       " turn on wild menu
" have command-line completion <tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:full

set clipboard=unnamed
set ruler          " show actual cursor position
set number         " line numbers
set lazyredraw     " do not redraw while running macros (much faster) 
set backspace=2    " backspace over everything
set shortmess=atI   " shortens messages
set equalalways
"}}}

" vim cues {{{

" vim 7+ and slow machines
set noshowmatch     " will cause the cursor to very briefly jump to a brace/parenthese/bracket's 'match'
set mat=0         " how many tenths of a second to blink matching brackets for

set hlsearch      " highlight all matches for a search pattern
set ignorecase    " ignore case in search,
set smartcase     " unless they contain upper-case letters. 
set incsearch     " incremental search: show the `best match so far' as search strings are typed
set gdefault      " assume the /g flag on :s substitutions to replace all matches in a line
set laststatus=2  " always show the status line
"}}}

" text formatting/layout {{{

set colorcolumn=80
set cursorline
set softtabstop=2 " unify (use indents of 2 spaces)

set tabstop=2     " tab spacing (settings below are just to unify it)
set shiftwidth=2  " unify 
set expandtab      " no real tabs please!

"set nowrap        " do not wrap lines (only on display)
"set sidescroll=10
" wrap
set wrap          " wrap lines (only on display)

set listchars+=tab:>-,eol:<,precedes:<,extends:>

set textwidth=80  " linebreak with <EOL> after length
"set wrapmargin=5  " linebreak with <EOL> after (screewidth - length)
set spell spelllang=en_us

"}}}

" other {{{

" display the current mode and partially-typed commands in the status line
set showmode     " display current mode ('insert', 'replace', ...)
set showcmd      " display partially-typed commands in the status line
set nomodeline   " don't have files trying to override this .vimrc
set fileformat=unix
set fileformats=unix,dos,mac

" for both CSS and HTML, use genuine tab characters for indentation, to make
" files a few bytes smaller
autocmd FileType html,css set noexpandtab tabstop=2

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings):
autocmd FileType make set noexpandtab shiftwidth=8

"}}}

" mappings {{{
let mapleader = ','
let maplocalleader = ','
let localleader = ','
let LocalLeader = ','

" start make
noremap <leader>m :make<CR>

" jump between .h and .cpp
noremap <leader>h :FSHere<CR>

let g:CommandTAcceptSelectionTabMap='<CR>'

" indent after a paranthesis
inoremap {<CR> {<CR><Space><Space><CR><Backspace>}<Esc>klli

" ;; jumps to the end of line and inserts ;
inoremap ;; <Esc>A;

" use jj for convenience Escape
inoremap jj <ESC>

" delete search highlighting
nnoremap <leader><space> :nohlsearch<CR>

" <leader>r start search/replace
nnoremap <leader>r :%s/\<<C-r><C-w>\>/

" <leader>cd goes to the path of the current file
map <leader>cd :cd %:p:h<CR>

nnoremap <Space> za

nmap <leader>bb :buffers<CR>

nmap <leader>bo :buffer

nmap <C-j> ddp
nmap <C-k> ddkP

" vimdiff shortcuts
noremap <leader>dlg :diffget 1<CR>
noremap <leader>dlp :diffput 1<CR>
noremap <leader>dmg :diffget 2<CR>
noremap <leader>dmp :diffput 2<CR>
noremap <leader>drg :diffget 3<CR>
noremap <leader>drp :diffput 3<CR>

" Wiki
noremap <leader>w :e ~/SparkleShare/wiki/main.org<CR>

noremap <leader>gs :Gstatus<CR>
noremap <leader>gp :Gpush<CR>
noremap <leader>gf :Gpull<CR>

noremap <leader>xx <Esc>A<Space>$\checkmark$<Esc>

noremap <leader>n <Esc>:cn<CR>zz

imap <F1> <Esc>

"}}}


" keystrokes {{{

" * beschissene deutsche umlaute und sz
imap ÎáÎéÎå ä
imap ÎİÎåÎåÎı ä
imap ÎáÎíÎı ö
imap ÎİÎåÎíÎõ ö
imap ÎáÎåÎ÷ ü
imap ÎİÎåÎñÎå ü
imap ÎáÎíÎå Ä
imap ÎİÎáÎ÷Îõ Ä
imap ÎáÎñÎé Ö
imap ÎİÎåÎáÎí Ö
imap ÎáÎñÎí Ü
imap ÎİÎåÎåÎİ Ü
imap ÎåÎåÎñ ß
imap ÎİÎåÎåÎé ß


" * Keystrokes -- Insert Mode

" allow <BkSpc> to delete line breaks, beyond the start of the current
" insertion, and over indentations:
set backspace=eol,start,indent

" disable arrow keys in normal mode
noremap  <Up> ""
"noremap! <Up> <Esc>
noremap  <Down> ""
"noremap! <Down> <Esc>
noremap  <Left> ""
"noremap! <Left> <Esc>
noremap  <Right> ""
"noremap! <Right> <Esc>
"


"}}}
"
" Commands {{{

command Vrc :e ~/.vimrc
command Wiki :e ~/SparklShare/wiki/main.org
command Sudow :w !sudo tee %

let g:EasyClipUseSubstituteDefaults=1

" }}}

" {{{ Templates
augroup templates
  au BufNewFile * silent! 0r ~/.vim/templates/temp.%:e
  au BufNewFile * silent!
  %substitute#\[:VE:\]\(.\{-\}\)\[:EVE:\]#\=eval(submatch(1))#ge
augroup END
" }}}
"
" file type specific options {{{

" tex {{{
" " IMPORTANT: grep will sometimes skip displaying the file name if you
" " search in a singe file. This will confuse Latex-Suite. Set your grep
" " program to always generate a file-name.
set grepprg=ack
"
" " OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults
" to
" " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" " The following changes the default filetype back to 'tex':
" Math enviroments get a pretty visualization

let g:vimtex_view_method = 'zathura'
let g:latex_latexmk_options='-pdf'
let g:vimtex_fold_enabled = 0
set cole=2
"}}}

" CPP {{{
" configure tags - add additional tags here or comment out not-used ones

" OmniCppComplete
"let OmniCpp_NamespaceSearch = 1
"let OmniCpp_GlobalScopeSearch = 1
"let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
"let OmniCpp_MayCompleteDot = 1 " autocomplete after .
"let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
"let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
au FileType cpp set cindent       " do c-style indenting
au FileType c set cindent       " do c-style indenting



" }}}

" Python {{{

au FileType python setlocal tabstop=4
au FileType python setlocal softtabstop=4
au FileType python setlocal shiftwidth=4

"}}}

" vimrc {{{
au FileType vim setlocal foldmethod=marker
au FileType vim setlocal foldmarker={{{,}}}
" }}}

" zshrc {{{
au FileType zsh setlocal foldmethod=marker
au FileType zsh setlocal foldmarker={{{,}}}
" }}}
"
" mail {{{
autocmd BufRead /tmp/alot.* set ft=mail
"}}}
" roslaunch files {{{
autocmd BufRead *.launch set ft=xml  
"
" wiki {{{
au FileType org setlocal foldlevel=5
" }}}
"}}}
"


" zshrc {{{
au FileType zsh setlocal foldmethod=marker
au FileType zsh setlocal foldmarker={{{,}}}
" }}}
"
" mail {{{
autocmd BufRead /tmp/alot.* set ft=mail
"}}}
" roslaunch files {{{
autocmd BufRead *.launch set ft=xml  
"
" wiki {{{
au FileType org setlocal foldlevel=5
" }}}
"}}}
"
